/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  11155111: {
    Marketplace: {
      address: "0xEafB0DceBd946faBA361940F5bf6A00f1e02c167",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_moduleCollection",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "AddressInsufficientBalance",
          type: "error",
        },
        {
          inputs: [],
          name: "AlreadyListed",
          type: "error",
        },
        {
          inputs: [],
          name: "FailedInnerCall",
          type: "error",
        },
        {
          inputs: [],
          name: "InsufficientBalance",
          type: "error",
        },
        {
          inputs: [],
          name: "NotCancelled",
          type: "error",
        },
        {
          inputs: [],
          name: "NotCreated",
          type: "error",
        },
        {
          inputs: [],
          name: "NotLoan",
          type: "error",
        },
        {
          inputs: [],
          name: "NotOwner",
          type: "error",
        },
        {
          inputs: [],
          name: "NotSale",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "enum IMarketplace.ListingStatus",
              name: "status",
              type: "uint8",
            },
          ],
          name: "ListingStatusChanged",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
          ],
          name: "buy",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
          ],
          name: "cancel",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "moduleId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "owner",
                  type: "address",
                },
                {
                  internalType: "enum IMarketplace.ListingType",
                  name: "listingType",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "price",
                  type: "uint256",
                },
              ],
              internalType: "struct IMarketplace.ListingParameters",
              name: "params",
              type: "tuple",
            },
          ],
          name: "computeListingId",
          outputs: [
            {
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
          ],
          name: "getListing",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "moduleId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "owner",
                  type: "address",
                },
                {
                  internalType: "enum IMarketplace.ListingType",
                  name: "listingType",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "price",
                  type: "uint256",
                },
                {
                  internalType: "enum IMarketplace.ListingStatus",
                  name: "status",
                  type: "uint8",
                },
              ],
              internalType: "struct IMarketplace.Listing",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "moduleId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "owner",
                  type: "address",
                },
                {
                  internalType: "enum IMarketplace.ListingType",
                  name: "listingType",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "price",
                  type: "uint256",
                },
              ],
              internalType: "struct IMarketplace.ListingParameters",
              name: "params",
              type: "tuple",
            },
          ],
          name: "list",
          outputs: [
            {
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "moduleCollection",
          outputs: [
            {
              internalType: "contract ModuleCollection",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "listingId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "moduleUser",
              type: "address",
            },
            {
              internalType: "uint64",
              name: "durationDays",
              type: "uint64",
            },
          ],
          name: "rent",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        buy: "contracts/IMarketplace.sol",
        cancel: "contracts/IMarketplace.sol",
        computeListingId: "contracts/IMarketplace.sol",
        getListing: "contracts/IMarketplace.sol",
        list: "contracts/IMarketplace.sol",
        moduleCollection: "contracts/IMarketplace.sol",
        rent: "contracts/IMarketplace.sol",
      },
    },
    ModuleCollection: {
      address: "0x48302FBD06C5a17855d7DD11ac3812d85C9288b8",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "initialOwner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "ApprovedOrOwnerRequired",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "balance",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "needed",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "ERC1155InsufficientBalance",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "approver",
              type: "address",
            },
          ],
          name: "ERC1155InvalidApprover",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "idsLength",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "valuesLength",
              type: "uint256",
            },
          ],
          name: "ERC1155InvalidArrayLength",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
          ],
          name: "ERC1155InvalidOperator",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "receiver",
              type: "address",
            },
          ],
          name: "ERC1155InvalidReceiver",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
          ],
          name: "ERC1155InvalidSender",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "ERC1155MissingApprovalForAll",
          type: "error",
        },
        {
          inputs: [],
          name: "ExpiryInFutureRequired",
          type: "error",
        },
        {
          inputs: [],
          name: "InsufficientBalance",
          type: "error",
        },
        {
          inputs: [],
          name: "MintToZeroAddress",
          type: "error",
        },
        {
          inputs: [],
          name: "ModuleAlreadyAdded",
          type: "error",
        },
        {
          inputs: [],
          name: "ModuleNotFound",
          type: "error",
        },
        {
          inputs: [],
          name: "ModuleURIEmpty",
          type: "error",
        },
        {
          inputs: [],
          name: "OnlyOneModuleAtATime",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "OwnableInvalidOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "OwnableUnauthorizedAccount",
          type: "error",
        },
        {
          inputs: [],
          name: "RecordAlreadyExists",
          type: "error",
        },
        {
          inputs: [],
          name: "RecordNotFound",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "account",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "approved",
              type: "bool",
            },
          ],
          name: "ApprovalForAll",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "recordId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint64",
              name: "amount",
              type: "uint64",
            },
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: false,
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint64",
              name: "expiry",
              type: "uint64",
            },
          ],
          name: "CreateUserRecord",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "recordId",
              type: "uint256",
            },
          ],
          name: "DeleteUserRecord",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "ModuleAdded",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address",
            },
          ],
          name: "ModuleFlagged",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "ids",
              type: "uint256[]",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]",
            },
          ],
          name: "TransferBatch",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "TransferSingle",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "string",
              name: "value",
              type: "string",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "URI",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address",
            },
            {
              internalType: "string",
              name: "moduleUri",
              type: "string",
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "uint96",
                  name: "royaltyBps",
                  type: "uint96",
                },
              ],
              internalType: "struct IModuleCollection.RoyaltyInfo",
              name: "info",
              type: "tuple",
            },
          ],
          name: "addModule",
          outputs: [
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "accounts",
              type: "address[]",
            },
            {
              internalType: "uint256[]",
              name: "ids",
              type: "uint256[]",
            },
          ],
          name: "balanceOfBatch",
          outputs: [
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address",
            },
          ],
          name: "check",
          outputs: [
            {
              internalType: "uint64",
              name: "listedAt",
              type: "uint64",
            },
            {
              internalType: "uint64",
              name: "flaggedAt",
              type: "uint64",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          name: "computeRecordId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
            {
              internalType: "uint64",
              name: "amount",
              type: "uint64",
            },
            {
              internalType: "uint64",
              name: "expiry",
              type: "uint64",
            },
          ],
          name: "createUserRecord",
          outputs: [
            {
              internalType: "uint256",
              name: "recordId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "recordId",
              type: "uint256",
            },
          ],
          name: "deleteUserRecord",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address",
            },
          ],
          name: "flagModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          name: "frozenBalanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          name: "getModuleAddress",
          outputs: [
            {
              internalType: "address",
              name: "module",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address",
            },
          ],
          name: "getModuleId",
          outputs: [
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
          ],
          name: "isApprovedForAll",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "mintModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "salePrice",
              type: "uint256",
            },
          ],
          name: "royaltyInfo",
          outputs: [
            {
              internalType: "address",
              name: "recipient",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "royaltyAmount",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256[]",
              name: "ids",
              type: "uint256[]",
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "safeBatchTransferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "safeTransferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              internalType: "bool",
              name: "approved",
              type: "bool",
            },
          ],
          name: "setApprovalForAll",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4",
            },
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "totalModules",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          name: "unfrozenBalanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "uri",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleId",
              type: "uint256",
            },
          ],
          name: "usableBalanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "recordId",
              type: "uint256",
            },
          ],
          name: "userRecordOf",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "owner",
                  type: "address",
                },
                {
                  internalType: "uint64",
                  name: "amount",
                  type: "uint64",
                },
                {
                  internalType: "address",
                  name: "user",
                  type: "address",
                },
                {
                  internalType: "uint64",
                  name: "expiry",
                  type: "uint64",
                },
              ],
              internalType: "struct IERC5006.UserRecord",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {
        addModule: "contracts/IModuleCollection.sol",
        flagModule: "contracts/IModuleCollection.sol",
        getModuleAddress: "contracts/IModuleCollection.sol",
        getModuleId: "contracts/IModuleCollection.sol",
        mintModule: "contracts/IModuleCollection.sol",
        unfrozenBalanceOf: "contracts/IModuleCollection.sol",
        royaltyInfo: "@openzeppelin/contracts/interfaces/IERC2981.sol",
        supportsInterface: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        createUserRecord: "contracts/IERC5006.sol",
        deleteUserRecord: "contracts/IERC5006.sol",
        frozenBalanceOf: "contracts/IERC5006.sol",
        usableBalanceOf: "contracts/IERC5006.sol",
        userRecordOf: "contracts/IERC5006.sol",
        balanceOf: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        balanceOfBatch: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        isApprovedForAll: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        safeBatchTransferFrom: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        safeTransferFrom: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        setApprovalForAll: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        uri: "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol",
        owner: "@openzeppelin/contracts/access/Ownable.sol",
        renounceOwnership: "@openzeppelin/contracts/access/Ownable.sol",
        transferOwnership: "@openzeppelin/contracts/access/Ownable.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
